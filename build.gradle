
group = 'com.rmj.gradle.base'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.1'
        classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.5'
    }
}

apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def scriptDirConfig = ".gradle/java/config"

//****CHECKSTYLE
apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "6.1.1"
    config = resources.text.fromFile(scriptDirConfig + "/checkstyle/checkstyle.xml")
    checkstyle.configProperties.checkstyleConfigDir = config.asFile().parent
}

task checkstyleMainHtml << {
    if (file(checkstyleMain.reports.xml.destination).exists()) {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: resources.text.fromFile(scriptDirConfig + "/checkstyle/checkstyle.xsl").asFile(),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
}
task checkstyleTestHtml << {
    if (file(checkstyleTest.reports.xml.destination).exists()) {
        ant.xslt(in: checkstyleTest.reports.xml.destination,
                style: resources.text.fromFile(scriptDirConfig + "/checkstyle/checkstyle.xsl").asFile(),
                out: new File(checkstyleTest.reports.xml.destination.parent, 'test.html'))
    }
}

checkstyleMain.finalizedBy checkstyleMainHtml
checkstyleTest.finalizedBy checkstyleTestHtml
checkstyleMain.doFirst {
    resources.text.fromFile(scriptDirConfig + "/checkstyle/suppressions.xml").asFile()
}

//****PMD
apply plugin: 'pmd'
pmd {
    toolVersion = '5.3.6'
    ruleSetConfig = resources.text.fromFile(scriptDirConfig + "/pmd/pmd-rulesets.xml")
    ruleSets = []
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}
task pmdMainHtml << {
    if (file(pmdMain.reports.xml.destination).exists()) {
        ant.xslt(in: pmdMain.reports.xml.destination,
                style: resources.text.fromFile(scriptDirConfig + "/pmd/pmd.xslt").asFile(),
                out: new File(pmd.reportsDir, 'main.html'))
    }
}
task pmdTestHtml << {
    if (file(pmdTest.reports.xml.destination).exists()) {
        ant.xslt(in: pmdTest.reports.xml.destination,
                style: resources.text.fromFile(scriptDirConfig + "/pmd/pmd.xslt").asFile(),
                out: new File(pmd.reportsDir, 'test.html'))
    }
}
pmdMain.finalizedBy pmdMainHtml
pmdTest.finalizedBy pmdTestHtml


//****JACOCO
apply plugin: 'jacoco'
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/reports/jacoco/jacocoHtml"
   }
}
test.finalizedBy(project.tasks.jacocoTestReport)

apply plugin: com.bmuschko.gradle.cargo.CargoPlugin

dependencies {
    cargo "org.codehaus.cargo:cargo-core-uberjar:1.4.5",
            "org.codehaus.cargo:cargo-ant:1.4.5",
            "org.glassfish.main.deployment:deployment-client:3.1.2"
}

cargo {
    containerId = 'glassfish3x'
    port = project.hasProperty('port') ? project.getProperty('port').toInteger() : 5448
    remote {
        hostname = project.hasProperty('hostname') ? project.getProperty('hostname') : 'localhost'
        username = project.hasProperty('username') ? project.getProperty('username') : ''
        password = project.hasProperty('password') ? project.getProperty('password') : ''
    }
}

ext {
    junit_version = '4.10'
    powermock_version = '1.6.4'
    mockito_version = '1.10.19'
}

dependencies {
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile(group: 'junit', name: 'junit', version: '4.10') {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockito_version
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: powermock_version
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powermock_version
    testCompile group: 'org.powermock', name: 'powermock-module-junit4-common', version: powermock_version
}